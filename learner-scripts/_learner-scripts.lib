#!/bin/bash

CREDS_FILE=../gen/workshop-credentials.json

if [ -f "$CREDS_FILE" ]
then
    AZURE_RESOURCE_GROUP=$(cat $CREDS_FILE | jq -r '.AZURE_RESOURCE_GROUP')
    AZURE_AKS_CLUSTER_NAME=$(cat $CREDS_FILE | jq -r '.AZURE_AKS_CLUSTER_NAME')
    AZURE_SUBSCRIPTION=$(cat $CREDS_FILE | jq -r '.AZURE_SUBSCRIPTION')
    DT_BASEURL=$(cat $CREDS_FILE | jq -r '.DT_BASEURL')
    DT_API_TOKEN=$(cat $CREDS_FILE | jq -r '.DT_API_TOKEN')
else 
  echo "ABORT: CREDS_FILE: $CREDS_FILE not found"
  exit 1
fi

getk8FrontEndPublicIP() {
  echo "Retrieving $AZURE_AKS_CLUSTER_NAME frontend Public IP"
  PUBLIC_IP_k8=$(kubectl -n staging get service frontend -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
}

getMonolithPublicIP() {
  HOSTNAME_MONOLITH="dt-orders-monolith"
  echo "Retrieving $HOSTNAME_MONOLITH Public IP"
  PUBLIC_IP_MONOLITH=$(az vm list \
    --resource-group "$AZURE_RESOURCE_GROUP" \
    --subscription "$AZURE_SUBSCRIPTION" \
    --query "[?name=='$HOSTNAME_MONOLITH'].publicIps" -d -o tsv)
}

getServicesPublicIP() {
  HOSTNAME_SERVICES="dt-orders-services"
  echo "Retrieving $HOSTNAME_SERVICES Public IP"
  PUBLIC_IP_SERVICES=$(az vm list \
    --resource-group "$AZURE_RESOURCE_GROUP" \
    --subscription "$AZURE_SUBSCRIPTION" \
    --query "[?name=='$HOSTNAME_SERVICES'].publicIps" -d -o tsv)
}

showAppUrls() {

  getMonolithPublicIP
  #getServicesPublicIP
  getk8FrontEndPublicIP
  
  echo ""
  echo "-----------------------------------------------------------------------------------"
  echo "Workshop Application URLs:"
  echo "-----------------------------------------------------------------------------------"
  echo ""
  if ! [ -z $PUBLIC_IP_MONOLITH ]; then
    echo "MONOLITH"
    echo "http://$PUBLIC_IP_MONOLITH"
    echo ""
  fi
  if ! [ -z $PUBLIC_IP_SERVICES ]; then
    echo "SERVICES"
    echo "http://$PUBLIC_IP_SERVICES"
    echo ""
  fi
  if ! [ -z $PUBLIC_IP_k8 ]; then
    echo "K8"
    echo "http://$PUBLIC_IP_k8"
    echo ""
  fi
  echo ""
}

setServicesVersion() {
  SERVICE=$1
  NEW_VERSION=$2
  TAG_PROJECT=dt-orders

  if [ "$SERVICE" = "order" ]; then
    TAG_SERVICE=order-service
    TAG_STAGE=staging
  elif [ "$SERVICE" = "customer" ]; then
    TAG_SERVICE=customer-service
    TAG_STAGE=staging
  elif [ "$SERVICE" = "backend" ]; then
    TAG_SERVICE=backend
    TAG_STAGE=production
  elif [ "$SERVICE" = "k8-order" ]; then
    SERVICE=order
    TAG_SERVICE=order-service
    TAG_STAGE=staging
  elif [ "$SERVICE" = "k8-customer" ]; then
    SERVICE=customer
    TAG_SERVICE=customer-service
    TAG_STAGE=staging
  else
    echo "ERROR setServicesVersion(): missing or invalid SERVICE $SERVICE : must be value of [order,customer,k8-order,k8-customer or backend"
    echo "Required arguments are: SERVICE NEW_VERSION"
    exit 1
  fi

  if [[ "$NEW_VERSION" = "1" || "$NEW_VERSION" = "2" || "$NEW_VERSION" = "3" ]]; then
    if [ "$TAG_STAGE" = "production" ]; then
      getMonolithPublicIP
      PUBLIC_IP=$PUBLIC_IP_MONOLITH
      TAG_PROCESS_GROUP="monolith-$SERVICE"
    elif [ "$TAG_STAGE" = "staging" ]; then
      getk8FrontEndPublicIP
      if [ -z $PUBLIC_IP_k8 ]; then
        echo "ERROR: Can't find k8 service. Not attempting to set version."
        exit 1
      fi
      PUBLIC_IP=$PUBLIC_IP_k8
      TAG_PROCESS_GROUP=$TAG_STAGE-$SERVICE
    else
      getServicesPublicIP
      PUBLIC_IP=$PUBLIC_IP_SERVICES
    fi
    
    SET_VERSION_URL="http://$PUBLIC_IP/$SERVICE/setversion/$NEW_VERSION"

    echo "================================================================="
    echo "Setting Service Version"
    echo "SERVICE         = $SERVICE"
    echo "NEW_VERSION     = $NEW_VERSION"
    echo "SET_VERSION_URL = $SET_VERSION_URL"
    echo "================================================================="
    RETURN_MESSAGE=$(curl -s -X GET $SET_VERSION_URL)
    if [[ "$RETURN_MESSAGE" == *"Action was successful"* || "$RETURN_MESSAGE" == *"Set version to"* ]]; then
      echo "Set $SERVICE to $NEW_VERSION was successful"
    else
      echo "ERROR setServicesVersion(): Issue setting version"
      exit 1
    fi
    pushDeploymentEvent $TAG_PROJECT $TAG_STAGE $TAG_SERVICE $NEW_VERSION "http://$PUBLIC_IP"
   else
      echo "ERROR setServicesVersion(): missing or invalid NEW_VERSION $NEW_VERSION : must be value of 1,2 or 3"
      echo "Required arguments are: SERVICE NEW_VERSION"
      exit 1
  fi
}

pushDeploymentEvent() {
  # reference: https://www.dynatrace.com/support/help/dynatrace-api/environment-api/events/post-event/
  # example arguments: dt-orders dev order-service
  DEPLOYMENT_PROJECT=$1
  TAG_STAGE=$2
  TAG_SERVICE=$3
  DEPLOYMENT_VERSION=$4
  CI_BACK_LINK=$5
  EMAIL=$(cat $CREDS_FILE | jq -r '.DT_DASHBOARD_OWNER_EMAIL')

  TAG_PROJECT=$DEPLOYMENT_PROJECT
  DT_API_URL="$DT_BASEURL/api/v2/events/ingest"
  DEPLOYMENT_NAME="Set $TAG_SERVICE to version $DEPLOYMENT_VERSION"
  CURRENTTIME=$(date +%s%N | cut -b1-13)

  echo "================================================================="
  echo "Sending Dynatrace Deployment event"
  echo "DT_API_URL                 = $DT_API_URL"
  echo "DEPLOYMENT_NAME            = $DEPLOYMENT_NAME"
  echo "DEPLOYMENT_VERSION         = $DEPLOYMENT_VERSION"
  echo "DEPLOYMENT_PROJECT         = $DEPLOYMENT_PROJECT"
  echo "CI_BACK_LINK               = $CI_BACK_LINK"
  echo "================================================================="
  POST_DATA=$(cat <<EOF
  {
      "eventType" : "CUSTOM_DEPLOYMENT",
      "title" : "Deploy version $DEPLOYMENT_VERSION for $DEPLOYMENT_PROJECT $TAG_SERVICE ",      
      "entitySelector": "type(PROCESS_GROUP_INSTANCE),entityName($TAG_PROCESS_GROUP)",
      "properties": {
    			 "deploymentName" : "$DEPLOYMENT_NAME",
            "deploymentProject" : "$DEPLOYMENT_PROJECT",
            "dt.event.deployment.version": "$DEPLOYMENT_VERSION",
            "dt.event.deployment.ci_back_link": "$CI_BACK_LINK",
            "dt.event.deployment.release_stage": "$TAG_STAGE" ,
            "commitRef": "master",
            "commitUser": "$EMAIL",
            "Approver" : "Alice McBright (alice.mcbright@dtorders.com)",
            "source": "Custom Unix Shell Script" ,
            "dt.event.deployment.remediation_action_link" : "https://ansibletower.internal.example.com/job?id=9",
            "release Notes" : "test release notes info"
      }
        }
  }
EOF
)
  echo "Push Event POST_DATA"
  echo $POST_DATA
  echo ""
  echo "Response Data"
  curl --url "$DT_API_URL" -H "Content-type: application/json" -H "Authorization: Api-Token "$DT_API_TOKEN -X POST -d "$POST_DATA"

  echo ""
  echo ""

}
